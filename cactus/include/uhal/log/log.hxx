
#include <mutex>                           // for lock_guard, mutex
#include <sstream>                         // for ostream, stringstream, endl
#include <string>                          // for operator+, basic_string

#include "uhal/log/exception.hpp"          // for exception
#include "uhal/log/LogLevels.hpp"          // for insert, ErrorLevel, DebugL...
#include "uhal/log/log_inserters.quote.hpp"  // for operator<<


namespace uhal{

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

template< typename T0 >
void log (  FatalLevel& aFatal , const T0& aArg0  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			aFatal.tail();
		}
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 , typename T31 >
void log (  FatalLevel& aFatal , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30 , const T31& aArg31  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
		if( LoggingIncludes( aFatal ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aFatal.stream() );
			aFatal.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			insert( lStr , aArg31 );
			aFatal.tail();
		}
	#endif
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

template< typename T0 >
void log (  ErrorLevel& aError , const T0& aArg0  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			aError.tail();
		}
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 , typename T31 >
void log (  ErrorLevel& aError , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30 , const T31& aArg31  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
		if( LoggingIncludes( aError ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aError.stream() );
			aError.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			insert( lStr , aArg31 );
			aError.tail();
		}
	#endif
	#endif
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

template< typename T0 >
void log (  WarningLevel& aWarning , const T0& aArg0  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 , typename T31 >
void log (  WarningLevel& aWarning , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30 , const T31& aArg31  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
		if( LoggingIncludes( aWarning ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aWarning.stream() );
			aWarning.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			insert( lStr , aArg31 );
			aWarning.tail();
		}
	#endif
	#endif
	#endif
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

template< typename T0 >
void log (  NoticeLevel& aNotice , const T0& aArg0  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 , typename T31 >
void log (  NoticeLevel& aNotice , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30 , const T31& aArg31  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
		if( LoggingIncludes( aNotice ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aNotice.stream() );
			aNotice.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			insert( lStr , aArg31 );
			aNotice.tail();
		}
	#endif
	#endif
	#endif
	#endif
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

template< typename T0 >
void log (  InfoLevel& aInfo , const T0& aArg0  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 , typename T31 >
void log (  InfoLevel& aInfo , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30 , const T31& aArg31  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
		if( LoggingIncludes( aInfo ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aInfo.stream() );
			aInfo.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			insert( lStr , aArg31 );
			aInfo.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

template< typename T0 >
void log (  DebugLevel& aDebug , const T0& aArg0  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 , typename T31 >
void log (  DebugLevel& aDebug , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30 , const T31& aArg31  )
{
	#ifndef LOGGING_EXCLUDE_FATAL
	#ifndef LOGGING_EXCLUDE_ERROR
	#ifndef LOGGING_EXCLUDE_WARNING
	#ifndef LOGGING_EXCLUDE_NOTICE
	#ifndef LOGGING_EXCLUDE_INFO
	#ifndef LOGGING_EXCLUDE_DEBUG
		if( LoggingIncludes( aDebug ) ){
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			std::ostream& lStr( aDebug.stream() );
			aDebug.head();
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			insert( lStr , aArg31 );
			aDebug.tail();
		}
	#endif
	#endif
	#endif
	#endif
	#endif
	#endif
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

template< typename T0 >
void log (  exception::exception& aExc , const T0& aArg0  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 , typename T20 , typename T21 , typename T22 , typename T23 , typename T24 , typename T25 , typename T26 , typename T27 , typename T28 , typename T29 , typename T30 , typename T31 >
void log (  exception::exception& aExc , const T0& aArg0 , const T1& aArg1 , const T2& aArg2 , const T3& aArg3 , const T4& aArg4 , const T5& aArg5 , const T6& aArg6 , const T7& aArg7 , const T8& aArg8 , const T9& aArg9 , const T10& aArg10 , const T11& aArg11 , const T12& aArg12 , const T13& aArg13 , const T14& aArg14 , const T15& aArg15 , const T16& aArg16 , const T17& aArg17 , const T18& aArg18 , const T19& aArg19 , const T20& aArg20 , const T21& aArg21 , const T22& aArg22 , const T23& aArg23 , const T24& aArg24 , const T25& aArg25 , const T26& aArg26 , const T27& aArg27 , const T28& aArg28 , const T29& aArg29 , const T30& aArg30 , const T31& aArg31  )
{
			std::stringstream lStr;
			{
			std::lock_guard<std::mutex> lLock ( GetLoggingMutex() );
			insert( lStr , aArg0 );
			insert( lStr , aArg1 );
			insert( lStr , aArg2 );
			insert( lStr , aArg3 );
			insert( lStr , aArg4 );
			insert( lStr , aArg5 );
			insert( lStr , aArg6 );
			insert( lStr , aArg7 );
			insert( lStr , aArg8 );
			insert( lStr , aArg9 );
			insert( lStr , aArg10 );
			insert( lStr , aArg11 );
			insert( lStr , aArg12 );
			insert( lStr , aArg13 );
			insert( lStr , aArg14 );
			insert( lStr , aArg15 );
			insert( lStr , aArg16 );
			insert( lStr , aArg17 );
			insert( lStr , aArg18 );
			insert( lStr , aArg19 );
			insert( lStr , aArg20 );
			insert( lStr , aArg21 );
			insert( lStr , aArg22 );
			insert( lStr , aArg23 );
			insert( lStr , aArg24 );
			insert( lStr , aArg25 );
			insert( lStr , aArg26 );
			insert( lStr , aArg27 );
			insert( lStr , aArg28 );
			insert( lStr , aArg29 );
			insert( lStr , aArg30 );
			insert( lStr , aArg31 );
			aExc.append( ( lStr.str() + "\n" ).c_str() );
			}
			log ( Error() , lStr.str() );
}

// ======================================================================================================================================================
// WARNING! This file is automatically generated! Do not modify it! Any changes will be overwritten!
// ======================================================================================================================================================

}

